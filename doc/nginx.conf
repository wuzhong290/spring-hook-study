
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    upstream orchard_hnyd{
        server 127.0.0.1:8080 weight=10;
    }   

    server {
        listen       28080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;        

			   location /getSign {
			       content_by_lua_file lua/getSign.lua;
			   } 
        
        location /api_order {
            content_by_lua_block {
              local cjson = require("cjson")
              ngx.say("request_uri:", ngx.var.request_uri,ngx.var.request_method)
              local arg = ngx.req.get_uri_args()
              for k,v in pairs(arg) do
                ngx.say("[GET ] key:", k, " v:", v)
              end
			        ngx.req.read_body()
			        local post_args = ngx.req.get_post_args();
			        ngx.say("[post ]:",cjson.encode(post_args))              
            }
        }

				location /sign_api_order {
						proxy_next_upstream http_502 http_504 error timeout invalid_header;
						proxy_set_header Host $host:$server_port;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						rewrite_by_lua_file lua/sign.lua;
						proxy_pass http://127.0.0.1:28080/api_order;
				}        
        
         location /sign_arg {
			       content_by_lua_block {
			       		ngx.say("request_uri:", ngx.var.request_uri)
								local request_method = ngx.var.request_method
								local receive_headers = ngx.req.get_headers()
								local arg = ngx.req.get_uri_args()
								for k,v in pairs(arg) do
								 ngx.say("[GET ] key:", k, " v:", v)
								end
								ngx.say(ngx.time())
			       }
        }          
        
         location /add_sign_arg {
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite_by_lua 'ngx.req.set_uri_args(ngx.var.args .. "&phoenix=sign")';
            proxy_pass http://127.0.0.1:28080/sign_arg;
        }          
        
			   location /redis {
			       content_by_lua_file lua/redis.lua;
			   }        
        
			   location /test {
			       content_by_lua_block {
								local request_method = ngx.var.request_method
								local receive_headers = ngx.req.get_headers()
								local arg = ngx.req.get_uri_args()
								for k,v in pairs(arg) do
								 ngx.say("[GET ] key:", k, " v:", v)
								end
			       }
			   }        
        
			   location /sign_test {
			       rewrite_by_lua_file lua/sign_test.lua;
			   }         
        
			   location /hello {
			       content_by_lua_file lua/hello.lua;
			   }             
        
			   location /printpost {
			       content_by_lua_file lua/post.lua;
			   }         
        
			   location /print_param {
			       content_by_lua_block {
								local request_method = ngx.var.request_method
								local receive_headers = ngx.req.get_headers()
								ngx.say("content_type:", string.sub(receive_headers["content-type"],1,20))
								local arg = ngx.req.get_uri_args()
								for k,v in pairs(arg) do
								 ngx.say("[GET ] key:", k, " v:", v)
								end
								args = ngx.req.get_post_args()
								for k,v in pairs(arg) do
								   ngx.say("[POST] key:", k, " v:", v)
								end	
			       }
			   }        
        
        location ~ /spring-hook-study/index.html {
        		set $resp_body "";
            content_by_lua '
            		ngx.req.read_body()
                local resp_body = ngx.req.get_body_data() or "-"                                                                                                    
                ngx.var.resp_body = resp_body
                ngx.exec("/spring-hook-study/index.jsp",  {result =resp_body})
            ';
        }              
        
         location ~ /(orchard-api-jsyd-njqg|spring-hook-study)/.* {
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://orchard_hnyd;
        }          

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

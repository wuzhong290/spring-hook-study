
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    upstream orchard_hnyd{
        server 127.0.0.1:8080 weight=10;
    }   

    server {
        listen       28080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;        

				location /getSign {
					content_by_lua_file lua/getSign.lua;
				}
        location /redis {
            content_by_lua_file lua/redis.lua;
        }
        location /api_limit {
            access_by_lua_file lua/limit.lua;
            content_by_lua_block {
                local cjson = require("cjson")
                ngx.say("request_uri:", ngx.var.request_uri,ngx.var.request_method)
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                ngx.say("[GET ] key:", k, " v:", v)
                end
                ngx.req.read_body()
                local post_args = ngx.req.get_post_args();
                ngx.say("[post ]:",cjson.encode(post_args))
            }
        }
        location /api_brush {
            access_by_lua_file lua/brush.lua;
            content_by_lua_block {
                local cjson = require("cjson")
                ngx.say("request_uri:", ngx.var.request_uri,ngx.var.request_method)
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                ngx.say("[GET ] key:", k, " v:", v)
                end
                ngx.req.read_body()
                local post_args = ngx.req.get_post_args();
                ngx.say("[post ]:",cjson.encode(post_args))
            }
        }
        location /modifyArgs {
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite_by_lua_file lua/modifyArgs.lua;
            proxy_pass http://127.0.0.1:28080/api_order;
        }

        location /api_order {
            content_by_lua_block {
                local cjson = require("cjson")
                ngx.say("request_uri:", ngx.var.request_uri,ngx.var.request_method)
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                ngx.say("[GET ] key:", k, " v:", v)
                end
                ngx.req.read_body()
                local post_args = ngx.req.get_post_args();
                ngx.say("[post ]:",cjson.encode(post_args))
            }
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    
    # HTTPS server
    #
    server {
        listen       443 ssl;
        server_name  localhost;
        # 这个是证书的crt文件所在目录
        ssl_certificate      E://tools//openresty-1.13.6.2-win64//ssl//buduhuisi.crt;
        # 这个是证书key文件所在目录
        ssl_certificate_key  E://tools//openresty-1.13.6.2-win64//ssl//buduhuisi.key.org;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  10m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        #设置长连接
        keepalive_timeout 70s;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
        #HSTS策略
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        #减少点击劫持
        add_header X-Frame-Options DENY;
        #禁止服务器自动解析资源类型
        add_header X-Content-Type-Options nosniff;
        #防XSS攻擊
        add_header X-Xss-Protection 1;

        location / {
            root   html;
            index  index.html index.htm;
        }
        
				location /getSign {
					content_by_lua_file lua/getSign.lua;
				}        
    }    
}
